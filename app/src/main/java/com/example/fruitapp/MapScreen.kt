@file:OptIn(ExperimentalPermissionsApi::class)

package com.example.fruitapp

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.os.Looper
import com.google.android.gms.maps.model.LatLng
import com.google.maps.android.compose.*

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import com.google.accompanist.permissions.ExperimentalPermissionsApi
import com.google.accompanist.permissions.isGranted
import com.google.accompanist.permissions.rememberPermissionState
import com.google.android.gms.location.LocationServices
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.maps.android.compose.GoogleMap
// Á∂≤Ë∑ØË´ãÊ±ÇÔºàOkHttpÔºâ
import okhttp3.OkHttpClient
import okhttp3.Request
// JSON ËôïÁêÜ
import org.json.JSONObject

import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.content.ContextCompat

import androidx.navigation.NavHostController
import com.example.fruitapp.network.RetrofitInstance
import com.google.android.gms.maps.model.CameraPosition
import com.google.android.libraries.places.api.Places
import com.google.android.libraries.places.api.model.Place
import com.google.android.libraries.places.api.model.RectangularBounds
import com.google.android.libraries.places.api.net.FetchPlaceRequest
import com.google.android.libraries.places.api.net.FindAutocompletePredictionsRequest
import com.google.android.libraries.places.api.net.PlacesClient
import com.google.gson.Gson
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.withContext
import java.net.URL
//
//@OptIn(ExperimentalPermissionsApi::class)
//@Composable
//fun MapScreen(navController: NavHostController) {
//    val context = LocalContext.current
//    val fusedLocationClient = remember { LocationServices.getFusedLocationProviderClient(context) }
//    val locationPermission = rememberPermissionState(android.Manifest.permission.ACCESS_FINE_LOCATION)
//
//    var currentLocation by remember { mutableStateOf<LatLng?>(null) }
//    var searchResults by remember { mutableStateOf<List<Pair<String, LatLng>>>(emptyList()) }
//
//    val cameraPositionState = rememberCameraPositionState()
//
//    // TODO: ÊèõÊàê‰Ω†ÁöÑ Google Cloud API Key
//    val apiKey = "AIzaSyAuEoMZPDV9xWY1F7-ghm_xYG9X-uvhpWc"
//
//    // Ë´ãÊ±ÇÊ¨äÈôê
//    LaunchedEffect(Unit) {
//        locationPermission.launchPermissionRequest()
//        Log.d("MapScreen", "Ë´ãÊ±ÇÊàêÂäü")
//    }
//
//    // ÂèñÂæóÂÆö‰Ωç
//    LaunchedEffect(locationPermission.status) {
//        if (locationPermission.status.isGranted) {
//            fusedLocationClient.lastLocation.addOnSuccessListener { location ->
//                location?.let {
//                    val latLng = LatLng(it.latitude, it.longitude)
//                    currentLocation = latLng
//                    cameraPositionState.position = CameraPosition.fromLatLngZoom(latLng, 15f)
//
//                    // üîç ÊêúÂ∞ãÈôÑËøëÊ∞¥ÊûúË°å
//                    fetchNearbyFruitShops(context, latLng, apiKey) { results ->
//                        searchResults = results
//                    }
//                }
//            }.addOnFailureListener {
//                Log.e("MapScreen", "ÂÆö‰ΩçÂ§±Êïó: ${it.message}")
//            }
//        }
//    }
//
//    // È°ØÁ§∫Âú∞Âúñ
//    GoogleMap(
//        modifier = Modifier.fillMaxSize(),
//        cameraPositionState = cameraPositionState,
//        properties = MapProperties(isMyLocationEnabled = locationPermission.status.isGranted)
//    ) {
//        // Ê®ôË®òÁõÆÂâç‰ΩçÁΩÆ
//        currentLocation?.let {
//            Marker(
//                state = MarkerState(position = it),
//                title = "ÁõÆÂâç‰ΩçÁΩÆ"
//            )
//        }
//
//        // Ê®ôË®òÊêúÂ∞ãÂà∞ÁöÑÊ∞¥ÊûúË°å
//        searchResults.forEach { (name, latLng) ->
//            Marker(
//                state = MarkerState(position = latLng),
//                title = name
//            )
//        }
//    }
//}
//
//fun fetchNearbyFruitShops(
//    context: Context,
//    location: LatLng,
//    apiKey: String,
//    onResult: (List<Pair<String, LatLng>>) -> Unit
//) {
//    val url = "https://maps.googleapis.com/maps/api/place/textsearch/json" +
//            "?query=Ê∞¥Êûú" +
//            "&location=${location.latitude},${location.longitude}" +
//            "&radius=2000" + // ÊêúÂ∞ãÂçäÂæë 2000 ÂÖ¨Â∞∫
//            "&key=$apiKey"
//
//    CoroutineScope(Dispatchers.IO).launch {
//        try {
//            val result = URL(url).readText()
//            val json = JSONObject(result)
//            val resultsArray = json.getJSONArray("results")
//
//            val list = mutableListOf<Pair<String, LatLng>>()
//            for (i in 0 until resultsArray.length()) {
//                val obj = resultsArray.getJSONObject(i)
//                val name = obj.getString("name")
//                val geometry = obj.getJSONObject("geometry").getJSONObject("location")
//                val lat = geometry.getDouble("lat")
//                val lng = geometry.getDouble("lng")
//                list.add(Pair(name, LatLng(lat, lng)))
//            }
//
//            withContext(Dispatchers.Main) {
//                onResult(list)
//            }
//        } catch (e: Exception) {
//            Log.e("fetchNearbyFruitShops", "API ÂëºÂè´Â§±Êïó: ${e.message}")
//        }
//    }
//}


@Composable
fun MapScreen(navController: NavHostController) {
    //ÁõÆÂâçÁöÑ‰ΩçÁΩÆ
    val context = LocalContext.current
    //ÂèñÂæóÂÆö‰ΩçÊúçÂãô
    val fusedLocationClient = remember { LocationServices.getFusedLocationProviderClient(context) }
    //Ê¨äÈôêÁãÄÊÖã
    val locationPermission = rememberPermissionState(android.Manifest.permission.ACCESS_FINE_LOCATION)
    //Ë®ò‰ΩèÁõÆÂâç‰ΩçÁΩÆ
    var currentLocation by remember { mutableStateOf<LatLng?>(null) }
    //Êñπ‰æøÁõ¥Êé•‰ΩøÁî®camera
    val coroutineScope = rememberCoroutineScope()

    var searchResults by remember { mutableStateOf<List<Pair<String, LatLng>>>(emptyList()) }

    val apiKey = "AIzaSyAuEoMZPDV9xWY1F7-ghm_xYG9X-uvhpWc"
    print("hahhaa")
    // Ë´ãÊ±ÇÂÆö‰ΩçÊ¨äÈôê
    LaunchedEffect(Unit) {
        locationPermission.launchPermissionRequest()
    }

    // ‚úÖ ÊîπÁî®Âç≥ÊôÇÂÆö‰Ωç requestLocationUpdatesÔºàÈÅøÂÖç lastLocation ÁÇ∫ nullÔºâ
    LaunchedEffect(locationPermission.status) {
        if (locationPermission.status.isGranted) {
            //È´òÁ≤æÊ∫ñÂ∫¶GPSÊØè1ÁßíÁ¢∫Ë™ç‰∏ÄÊ¨°‰ΩçÁΩÆÊõ¥Êñ∞
            val locationRequest = com.google.android.gms.location.LocationRequest.create().apply {
                interval = 0   // ‰∏çÈúÄË¶ÅÈáçË§áÊõ¥Êñ∞
                numUpdates = 1 //  Âè™Ë¶Å‰∏ÄÊ¨°Êõ¥Êñ∞
            }
            //ifÂõûÂÇ≥‰ΩçÁΩÆÂ∞±ÊúÉËß∏Áôºcallback
            val locationCallback = object : com.google.android.gms.location.LocationCallback() {
                override fun onLocationResult(result: com.google.android.gms.location.LocationResult) {
                    result.lastLocation?.let {
                        currentLocation = LatLng(it.latitude, it.longitude)
                        Log.d("MapScreen", "‚úÖ Âç≥ÊôÇÂÆö‰ΩçÂèñÂæó: ${it.latitude}, ${it.longitude}")

                    } ?: Log.e("MapScreen", "‚ùå ÁÑ°Ê≥ïÂèñÂæó‰ΩçÁΩÆÔºàÂèØËÉΩÂ∞öÊú™Ë®≠ÂÆö GPS Ê®°Êì¨ÂÆö‰ΩçÔºâ")
                }
            }
            //Ê™¢Êü•ÊòØÂê¶ÊúâÊ¨äÈôêÔºåÂ¶ÇÊûúÊ≤íÊúâË¶Åcatch
            if (ContextCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
                try {
                    fusedLocationClient.requestLocationUpdates(
                        locationRequest,
                        locationCallback,
                        Looper.getMainLooper()
                    )
                } catch (e: SecurityException) {
                    Log.e("MapScreen", "‚ùå Ê¨äÈôê‰∏çË∂≥ÔºåÁÑ°Ê≥ïÂïüÂãïÂÆö‰Ωç: ${e.message}")
                }
            } else {
                Log.w("MapScreen", "‚ö†Ô∏è Â∞öÊú™ÂèñÂæóÂÆö‰ΩçÊ¨äÈôê")
            }
        }
    }


    // Âª∫Á´ãÂú∞ÂúñÁõ∏Ê©ü
    val cameraPositionState = rememberCameraPositionState()
    //ËÆìÁõ∏Ê©üÁßªÂãïÂà∞GPSÂÆö‰ΩçÂàùÂßã‰ΩçÁΩÆ
    LaunchedEffect(currentLocation) {
        currentLocation?.let {
            cameraPositionState.animate(
                CameraUpdateFactory.newLatLngZoom(it, 16f),
                1000
            )
        }
    }

    // ‚úÖ ‰ΩøÁî®Êñ∞Áâà Places API ÊêúÂ∞ãÊ∞¥ÊûúÂ∫ó
    LaunchedEffect(currentLocation) {
        currentLocation?.let { location ->
            coroutineScope.launch {
                try {
                    val request = NewPlacesRequest(
                        textQuery = "Ê∞¥Êûú",
                        locationBias = LocationBias(
                            circle = Circle(
                                center = LatLngLiteral(location.latitude, location.longitude),
                                radius = 50.0 // ÂÖ¨Â∞∫ Êõ¥ÊîπÂæåÊ≤íÊúâËÆäÂãï
                            )
                        )
                    )


                    // Âèñ‰ª£ÁõÆÂâçÁöÑÂëºÂè´
                    val resp = RetrofitInstance.newPlacesApi.searchPlaces(
                        request = request,   // ÂéüÊú¨Ê∞¥Êûúreq
                        apiKey = apiKey
                        // Ëã•‰Ω†ÁöÑ service È†êË®≠ fieldMask Â∑≤Á∂ìÂØ´Âú®ÂáΩÂºèÂèÉÊï∏ÔºåÂ∞±‰∏çÁî®ÂÜçÂÇ≥
                    )



                    if (resp.isSuccessful) {
                        val body = resp.body()
                        searchResults = body?.places?.mapNotNull { p ->
                            val name = p.displayName?.text
                            val lat = p.location?.latitude
                            val lng = p.location?.longitude
                            if (name != null && lat != null && lng != null) name to LatLng(lat, lng) else null
                        } ?: emptyList()
                        Log.d("NewPlaces", "‚úÖ ÊâæÂà∞ ${searchResults.size} Á≠Ü")
                        searchResults.forEach { (name, latLng) ->
                            Log.d("NewPlaces", "üìç $name @ ${latLng.latitude}, ${latLng.longitude}")
                        }

                    } else {
                        val err = resp.errorBody()?.string()
                        Log.e("NewPlaces", "‚ùå HTTP ${resp.code()}Ôºö$err")
                    }
                } catch (e: Exception) {
                    Log.e("NewPlaces", "‚ùå ÊêúÂ∞ãÈåØË™§: ${e.message}")
                }
            }
        }
    }


    Scaffold(

        topBar = {
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(90.dp)
                    .background(Color.Gray.copy(alpha = 0.6f)), // ÁÅ∞Ëâ≤‰∏îÈÄèÊòé
                contentAlignment = Alignment.Center
            ) {
                // ‰∏≠ÈñìÊ®ôÈ°å
                Text(
                    text = "ÊûúÁÑ∂ÊúÉËæ®Ë≠ò",
                    style = MaterialTheme.typography.titleMedium.copy(
                        fontSize=28.sp
                    ) ,
                    modifier = Modifier.padding(top = 30.dp)
                )

                // Â∑¶IconÔºàÂÆö‰ΩçËàáË®≠ÂÆöÔºâ
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 10.dp)
                        .padding(top = 30.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    IconButton(onClick = { navController.navigate("home") }) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "‰∏ªÁï´Èù¢", modifier = Modifier.size(32.dp))

                    }

                }
            }
        },
        containerColor = MaterialTheme.colorScheme.background
    ) {innerPadding ->
        // È°ØÁ§∫Âú∞Âúñ + ‰ΩøÁî®ËÄÖ‰ΩçÁΩÆ Marker
        GoogleMap(
            modifier =
                Modifier.fillMaxSize()
                    .padding(innerPadding),//Ë¶Å‰ΩøÁî®innerpadding
            cameraPositionState = cameraPositionState
        ) {
            currentLocation?.let {
                Log.d("MapScreen", "Âú∞ÂúñÈ°ØÁ§∫Ê®ôË®ò‰ΩçÁΩÆ: ${it.latitude}, ${it.longitude}")
                Marker(
                    state = MarkerState(position = it),
                    title = "‰Ω†Âú®ÈÄôË£°"
                )
            }
            // È°ØÁ§∫ÊêúÂ∞ãÁµêÊûú
            searchResults.forEach { (name, latLng) ->
                Marker(
                    state = MarkerState(position = latLng),
                    title = name
                )
            }
        }

    }

}








